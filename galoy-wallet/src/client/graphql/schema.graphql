type Query {
  btcPrice: Price
  accountDefaultWallet(
    username: Username!
    walletCurrency: WalletCurrency
  ): PublicWallet!
}

type Mutation {
  userRequestAuthCode(input: UserRequestAuthCodeInput!): SuccessPayload!
  userLogin(input: UserLoginInput!): AuthTokenPayload!
}

"""
Non-fractional signed whole numeric value between -(2^53) + 1 and 2^53 - 1
"""
scalar SafeInt

enum ExchangeCurrencyUnit {
  BTCSAT
  USDCENT
}

"""
Price amount expressed in base/offset. To calculate, use: `base / 10^offset`
"""
type Price {
  base: SafeInt!
  currencyUnit: ExchangeCurrencyUnit!
  formattedAmount: String!
  offset: Int!
}

"""
Phone number which includes country code
"""
scalar Phone

input UserRequestAuthCodeInput {
  phone: Phone!
}

interface Error {
  message: String!
  path: [String]
}

type SuccessPayload {
  errors: [Error!]!
  success: Boolean
}

"""
Unique identifier of a user
"""
scalar Username

enum WalletCurrency {
  BTC
  USD
}

"""
A public view of a generic wallet which stores value in one of our supported currencies.
"""
type PublicWallet {
  id: ID!
  walletCurrency: WalletCurrency!
}

"""
An authentication code valid for a single use
"""
scalar OneTimeAuthCode

input UserLoginInput {
  code: OneTimeAuthCode!
  phone: Phone!
}

"""
An JWT-formatted authentication token
"""
scalar AuthToken

type AuthTokenPayload {
  authToken: AuthToken
  errors: [Error!]!
}
